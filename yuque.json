[
  {
    "title": "详细Hexo博客搭建：云端写作+自动构建+自动部署",
    "description": "YuQue云端写作+Travis-ci自动构建+github-pages发布   序言：在网上看见Nero大神的一篇文章https://segmentfault.com/a/1190000017797561，简单讲述了如何构建一个云端写作自动部署到github pages的hexo 静态博客网...",
    "created_at": "2019-01-17T08:26:03.000Z",
    "updated_at": "2019-01-17T08:49:24.000Z",
    "published_at": "2019-01-17T08:49:24.000Z",
    "format": "lake",
    "slug": "wezqct",
    "last_editor": {
      "id": 247315,
      "type": "User",
      "login": "rayleeafar",
      "name": "rayleeafar",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-01-16T11:20:13.000Z",
      "updated_at": "2019-01-17T04:21:15.000Z",
      "_serializer": "v2.user"
    },
    "body": "# YuQue云端写作+Travis-ci自动构建+github-pages发布   \n**序言：**在网上看见Nero大神的一篇文章[https://segmentfault.com/a/1190000017797561](https://segmentfault.com/a/1190000017797561)，简单讲述了如何构建一个云端写作自动部署到github pages的hexo 静态博客网站，之前我已经在github pages上搭建了一个博客，无奈觉得每次写作非常不方便，用代码编辑器vs code写md文档然后手动生成静态再部署，写作环境实在太差，之后便放弃直接在CSDN上写了。看到上面那篇文章，顿觉激动，在语雀这样方便的平台上编写文档，自动部署，简直爽翻，遂动手开干，花了半天的时间搞定。由于大神写的过于简略，途中遇到不少坑，遂填坑出一个完整的搭建流程<br /><br /><br />**结果：**\n* 我已搭建好的博客： [https://rayleeafar.github.io/](https://rayleeafar.github.io/)  \n* 发布博客静态页面的仓库： [https://github.com/rayleeafar/rayleeafar.github.io](https://github.com/rayleeafar/rayleeafar.github.io)\n* 博客源码的仓库： [https://github.com/rayleeafar/rayleeafar-blog](https://github.com/rayleeafar/rayleeafar-blog)\n\n有问题可以参考源码里面的配置\n\n### 搭建步骤：  \n\n#### 一、GitHub pages + Hexo 搭建初级个人博客  \n参考文章：  \n* 初始化GitHub pages:  [https://pages.github.com/](https://pages.github.com/)  \n* 安装hexo及相关依赖:  [https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n* 在第一步的GH-pages仓库目录中初始化hexo: [https://hexo.io/zh-cn/docs/setup](https://hexo.io/zh-cn/docs/setup)  \n* 开始写作: [https://hexo.io/zh-cn/docs/writing](https://hexo.io/zh-cn/docs/writing)\n* 部署到github pages: [https://hexo.io/zh-cn/docs/deployment](https://hexo.io/zh-cn/docs/deployment)\n\n#### 二、GitHub pages + Hexo + travis-ci 搭建中级 CI自动部署博客  \n主要步骤参考: [https://segmentfault.com/a/1190000004667156#articleHeader1](https://segmentfault.com/a/1190000004667156#articleHeader1)<br />其中需要注意的几点是:\n* 文章需要安装Ruby，才能使用gem 安装travis工具 \n```bash\nsudo apt install ruby\ngem install travis\n```\n* 生成ssh-key的过程有点问题，按照文章ci部署的时候会报错 vi undefine，正确步骤是用以下命令登录\n```\ncd path/to/your/repo/.travis\nssh-keygen -t rsa -C \"youremail@example.com\"\ntravis login --pro #用github账号登录\ntravis encrypt-file id_rsa --pro\n#得到  openssl aes-256-cbc -K $encrypted_xxxxxxxxxxx_key -iv $encrypted_xxxxxxxxxxx_iv\n#其中 id_rsa.enc的位置需要注意设置对\n```\n\n注意以上两个点，按照文章步骤申请travis账号开通repo权限就能完成部署了\n\n#### 三、GitHub pages + Hexo + travis-ci + YuQue + Serverless搭建高级 云端写作->自动部署博客    \n步骤参考文章:\n* [https://segmentfault.com/a/1190000017797561](https://segmentfault.com/a/1190000017797561)\n\n按照大神的文章走，主要注意以下几点，找到并设置对各个参数\n* YuQue-hexo库的使用  [https://github.com/x-cold/yuque-hexo](https://github.com/x-cold/yuque-hexo)\n* 修改package.json，增加配置:  \n\n\n```bash\n  \"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"rayleeafar\",#填写你的语雀账号名称\n    \"repo\": \"gg272k\",#填写在语雀上创建的文章仓库的编号一般是几个字母数字，你也可以自己改，下图中路径最后的那个值\n    \"mdNameFormat\": \"title\",\n    \"postPath\": \"source/_posts/yuque\"\n  },\n    \"scripts\": {\n    \"sync\": \"yuque-hexo sync\",\n    \"clean:yuque\": \"yuque-hexo clean\",\n    \"deploy\": \"npm run sync && hexo clean && hexo g -d\",\n  }\n```\n\n* ![Screenshot from 2019-01-17 13-55-04.png](https://cdn.nlark.com/yuque/0/2019/png/247315/1547704531539-87c973b8-fa2f-4d8f-bc18-1f9b2c7d796c.png#align=left&display=inline&height=423&linkTarget=_blank&name=Screenshot%20from%202019-01-17%2013-55-04.png&originHeight=722&originWidth=1199&size=47422&width=703)\n##### * serverless 函数中参数的设置:\n文章中说用postman发个请求，也可以用curl: <br />再返回的数据中找到repo的id，我的是：7596310<br />\n```\n>> curl -H \"Travis-API-Version: 3\" -H \"User-Agent: API Explorer\" \\ -H \"Authorization: token <your_token>\" \\ https://api.travis-ci.org/owner/<your_name>/repos\n#curl的返回信息\n......\n  \"repositories\": [\n    {\n      \"@type\": \"repository\",\n      \"@href\": \"/repo/7596310\",\n      \"@representation\": \"standard\",\n      \"@permissions\": {\n        \"read\": true,\n        \"migrate\": true,\n        \"star\": true,\n        \"unstar\": true,\n        \"create_cron\": true,\n        \"create_env_var\": true,\n        \"create_key_pair\": true,\n        \"delete_key_pair\": true,\n        \"create_request\": true,\n        \"admin\": true,\n        \"activate\": true,\n        \"deactivate\": true\n      },\n      \"id\": 7596310,\n      \"name\": \"rayleeafar-blog\",\n      \"slug\": \"rayleeafar/rayleeafar-blog\",\n      \"description\": null,\n      \"github_id\": 166050465,\n      \"github_language\": null,\n      \"active\": true,\n      \"private\": false,\n      \"owner\": {\n        \"@type\": \"user\",\n        \"id\": 1254643,\n        \"login\": \"rayleeafar\",\n        \"@href\": \"/user/1254643\"\n      },\n......\n```\n\n* 我申请的是腾讯的serverless服务，在腾讯云上注册登录，创建函数服务:\n\n    用下面这个函数，作者的那个里面 有个接口地址有点不同，我抓travis看到接口URL是另一个：\n> curl_setopt($curl, CURLOPT_URL, '**https://api.travis-ci.com**/repo/'.$repos.'/requests');\n\n\n```php\n<?php\nfunction main_handler($event, $context) {\n    // 解析语雀post的数据\n    $update_title = '';\n    if($event->body){\n        $yuque_data= json_decode($event->body);\n        $update_title .= $yuque_data->data->title;\n    }\n    // default params\n    $repos = '7596310';  // 你的仓库id 或 slug\n    $token = 'yJsKEMoSNUmQSv9kLFsbvg'; // 你的登录token\n    $message = date(\"Y/m/d\").':yuque update:'.$update_title;\n    $branch = 'master';\n    // post params\n    $queryString = $event->queryString;\n    $q_token = $queryString->token ? $queryString->token : $token;\n    $q_repos = $queryString->repos ? $queryString->repos : $repos;\n    $q_message = $queryString->message ? $queryString->message : $message;\n    $q_branch = $queryString->branch ? $queryString->branch : 'master';\n    echo($q_token);\n    echo('===');\n    echo ($q_repos);\n    echo ('===');\n    echo ($q_message);\n    echo ('===');\n    echo ($q_branch);\n    echo ('===');\n    //request travis ci\n    $res_info = triggerTravisCI($q_repos, $q_token, $q_message, $q_branch);\n\n    $res_code = 0;\n    $res_message = '未知';\n    if($res_info['http_code']){\n        $res_code = $res_info['http_code'];\n        switch($res_info['http_code']){\n            case 200:\n            case 202:\n                $res_message = 'success';\n            break;\n            default:\n                $res_message = 'faild';\n            break;\n        }\n    }\n    $res = array(\n        'status'=>$res_code,\n        'message'=>$res_message\n    );\n    return $res;\n}\n\n/*\n* @description  travis api , trigger a build\n* @param $repos string 仓库ID、slug\n* @param $token string 登录验证token\n* @param $message string 触发信息\n* @param $branch string 分支\n* @return $info array 回包信息\n*/\nfunction triggerTravisCI ($repos, $token, $message='yuque update', $branch='master') {\n    //初始化\n    $curl = curl_init();\n    //设置抓取的url https://api.travis-ci.com/repo/7596310/requests\n    curl_setopt($curl, CURLOPT_URL, 'https://api.travis-ci.com/repo/'.$repos.'/requests');\n    //设置获取的信息以文件流的形式返回，而不是直接输出。\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    //设置post方式提交\n    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n    //设置post数据\n    $post_data = json_encode(array(\n        \"request\"=> array(\n            \"message\"=>$message,\n            \"branch\"=>$branch\n        )\n    ));\n    $header = array(\n      'Content-Type: application/json',\n      'Travis-API-Version: 3',\n      'Authorization:token '.$token,\n      'Content-Length:' . strlen($post_data)\n    );\n    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);\n    //执行命令\n    $data = curl_exec($curl);\n    $info = curl_getinfo($curl);\n    //关闭URL请求\n    curl_close($curl);\n    return $info;\n}\n?>\n\n```\n\n* 按照文章的步骤创建并填对参数应该就事成一大半了\n\n#### 后记  \n按照上述文章及注意的点走完，试试在语雀上写个文章并发布，登录serverless看看hook有没有触发，登录travis-ci看看构建是否成功，有问题留言联系呀～～<br />祝各位写作愉快～～～～～\n"
  }
]